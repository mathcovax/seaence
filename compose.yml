include:
  # installer node global
  - path:
      - ./.docker/node-installer.compose.yml
  # spotter service (client front)
  - path:
      - ${INCLUDE_PATH}/spotter/compose.yml
  # rosetta service (libre translate)
  - path:
      - ${INCLUDE_PATH}/rosetta/compose.yml
  # sea service (elastic search)
  - path:
      - ${INCLUDE_PATH}/sea/compose.yml
  # school service
  - path:
      - ${INCLUDE_PATH}/school/compose.yml
  # marine-snow service
  - path:
      - ${INCLUDE_PATH}/marine-snow/compose.yml
  # horizon service (gateway)
  - path:
      - ${INCLUDE_PATH}/horizon/compose.yml
  # harbor service (auth)
  - path:
      - ${INCLUDE_PATH}/harbor/compose.yml
  # abys service
  - path:
      - ${INCLUDE_PATH}/abys/compose.yml
  # bridge service (gateway interne)
  - path:
      - ${INCLUDE_PATH}/bridge/compose.yml
  # lighthouse service (BO admin)
  - path:
      - ${INCLUDE_PATH}/lighthouse/compose.yml
  # bottle service (notification)
  - path:
      - ${INCLUDE_PATH}/bottle/compose.yml
  - path:
      - ${INCLUDE_PATH}/coral/compose.yml

services:
  async-message-mongo:
    extends:
      file: ${TEMPLATE_COMPOSE_MONGO_DEV}
      service: template-mongo
    attach: false
    command: [ "mongod", "--replSet", "rs0" ]
    post_start:
      - command: |
          bash -c "
            sleep 5 && \
            mongosh --eval 'try { rs.status().ok } catch(e) { rs.initiate({ _id: \"rs0\", members: [{ _id: 0, host: \"async-message-mongo:27017\" }] }) }' && \
            echo '✅ Replica set prêt avec authentification'
          "
    volumes:
      - "async-message-mongo-data:/data/db"

volumes:
  async-message-mongo-data:
