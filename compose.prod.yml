services:
  horizon:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    command: start:horizon:prod
  harbor:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    command: start:harbor:prod
  harbor-postgres:
    image: postgres:17.4-alpine3.21
    restart: always
    env_file: ./duplo/.env
    volumes:
      - harbor-postgres-data:/var/lib/postgresql/data
    attach: false
  abys:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    command: start:abys:prod
  abys-mongo:
    image: mongo:8.0.6
    restart: always
    env_file: ./services/abys/.env
    volumes:
      - "abys-mongo-data:/data/db"
    attach: false
  colossal:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
      ports:
        - 3000:3000 # machine:container
    command: start:colossal:prod
  marine-snow:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    command: start:marine-snow:prod
  tide:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
      ports:
        - 3001:3000 # machine:container
    command: start:tide:prod
  sea:
    image: elasticsearch:8.17.3
    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - sea-es-data:/usr/share/elasticsearch/data
  school:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    command: start:school:prod
  school-mongo:
    image: mongo:8.0.6
    restart: always
    env_file: ./services/school/.env
    volumes:
      - "school-mongo-data:/data/db"
    attach: false
  pilot:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    ports:
      - 3002:3000 # machine:container
    command: start:pilot:prod
  bottle:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    command: start:bottle:prod
  bottle-mongo:
    image: mongo:8.0.6
    restart: always
    env_file: ./services/bottle/.env
    volumes:
      - "bottle-mongo-data:/data/db"
    attach: false
  spotter:
    build:
      context: .
      dockerfile: ./.docker/node-prod.dockerfile
    ports:
      - 3003:3000 # machine:container
    command: start:spotter:prod
  rosetta:
    # port 5000
    build:
      context: ./services/rosetta
      dockerfile: ./.docker/rosetta-prod.dockerfile
    healthcheck:
      test: [ 'CMD-SHELL', '/venv/bin/python scripts/healthcheck.py' ]

volumes:
  harbor-postgres-data:
  abys-mongo-data:
  school-mongo-data:
  bottle-mongo-data:
  sea-es-data:
