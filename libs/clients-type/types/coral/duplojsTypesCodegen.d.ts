// Generated by @duplojs/types-codegen
/* eslint-disable */
/* prettier-ignore */
/* istanbul ignore file */
/* v8 ignore start */
// noinspection JSUnusedGlobalSymbols
// @ts-nocheck
type OperatorContent = OperatorAnd | OperatorOR | OperatorNot | ComparatorText | ComparatorYear;

export { OperatorContent };

type OperatorAnd = {
    type: "operator";
    name: "and";
    content: OperatorContent[];
};

export { OperatorAnd };

type OperatorOR = {
    type: "operator";
    name: "or";
    content: OperatorContent[];
};

export { OperatorOR };

type OperatorNot = {
    type: "operator";
    name: "not";
    content: OperatorContent | null;
};

export { OperatorNot };

type ComparatorText = {
    type: "comparator";
    name: "text";
    field: "allField" | "title" | "abstract";
    value: string;
};

export { ComparatorText };

type ComparatorYear = {
    type: "comparator";
    name: "year";
    field: "allDate" | "webDate" | "journalDate";
    value: number;
};

export { ComparatorYear };

type CodegenRoutes = ({
    method: "POST";
    path: "/create-document-folder";
    body: {
        userId: string;
        documentFolderName: string;
    };
    response: {
        code: 409;
        information: "documentFolder.alreadyExists";
        body?: undefined;
    } | {
        code: 409;
        information: "documentFolder.maxQuantity";
        body?: undefined;
    } | {
        code: 200;
        information: "documentFolder.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/get-document-folder";
    body: {
        documentFolderId: string;
        userId: string;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentFolder.found";
        body: {
            id: string;
            userId: string;
            name: string;
            numberOfDocument: number;
            createdAt: Date;
        };
    };
}) | ({
    method: "POST";
    path: "/remove-document-folder";
    body: {
        documentFolderId: string;
        userId: string;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentFolder.removed";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/search-document-folders";
    body: {
        userId: string;
        partialDocumentFolderName: string;
        page: number;
        quantityPerPage: number;
    };
    response: {
        code: 200;
        information: "documentFolders.found";
        body: {
            id: string;
            userId: string;
            name: string;
            numberOfDocument: number;
            createdAt: Date;
        }[];
    };
}) | ({
    method: "POST";
    path: "/get-search-document-folders-count";
    body: {
        userId: string;
        partialDocumentFolderName: string;
    };
    response: {
        code: 200;
        information: "documentFolders.searchDetails";
        body: {
            total: number;
        };
    };
}) | ({
    method: "POST";
    path: "/create-document-in-folder";
    body: {
        documentFolderId: string;
        userId: string;
    } & {
        nodeSameRawDocumentId: string;
        documentInFolderName: string;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 409;
        information: "documentInFolder.alreadyExists";
        body?: undefined;
    } | {
        code: 409;
        information: "documentInFolder.maxQuantity";
        body?: undefined;
    } | {
        code: 200;
        information: "documentInFolder.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/get-document-in-folder";
    body: {
        documentFolderId: string;
        userId: string;
    } & {
        nodeSameRawDocumentId: string;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "documentInFolder.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentInFolder.found";
        body: {
            documentFolderId: string;
            nodeSameRawDocumentId: string;
            name: string;
            addedAt: Date;
        };
    };
}) | ({
    method: "POST";
    path: "/remove-document-in-folder";
    body: {
        documentFolderId: string;
        userId: string;
    } & {
        nodeSameRawDocumentId: string;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "documentInFolder.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentInFolder.removed";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/search-documents-in-folder";
    body: {
        documentFolderId: string;
        userId: string;
    } & {
        partialDocumentInFolderName: string;
        page: number;
        quantityPerPage: number;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentsInFolder.found";
        body: {
            documentFolderId: string;
            nodeSameRawDocumentId: string;
            name: string;
            addedAt: Date;
        }[];
    };
}) | ({
    method: "POST";
    path: "/get-search-documents-in-folder-count";
    body: {
        documentFolderId: string;
        userId: string;
    } & {
        partialDocumentInFolderName: string;
    };
    response: {
        code: 403;
        information: "documentFolder.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "documentFolder.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentsInFolder.searchDetails";
        body: {
            total: number;
        };
    };
}) | ({
    method: "POST";
    path: "/create-favorite-equation";
    body: {
        userId: string;
        equation: OperatorContent;
        favoriteEquationName: string;
    };
    response: {
        code: 409;
        information: "favoriEquation.nameAlreadyUse";
        body?: undefined;
    } | {
        code: 200;
        information: "favoriEqaution.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/get-favorite-equation";
    body: {
        userId: string;
        favoriteEquationId: string;
    };
    response: {
        code: 403;
        information: "favoriteEquation.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "favoriteEquation.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "favoriEquation.found";
        body: {
            id: string;
            name: string;
            userId: string;
            equation: OperatorContent;
            addedAt: Date;
        };
    };
}) | ({
    method: "POST";
    path: "/remove-equation-from-favorite";
    body: {
        userId: string;
        favoriteEquationId: string;
    };
    response: {
        code: 403;
        information: "favoriteEquation.wrongProprietary";
        body?: undefined;
    } | {
        code: 404;
        information: "favoriteEquation.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "favoriequation.removed";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/search-favorite-equations";
    body: {
        userId: string;
        partialFavoriteEquationName: string;
        page: number;
        quantityPerPage: number;
    };
    response: {
        code: 200;
        information: "favoriEquations.found";
        body: {
            id: string;
            name: string;
            userId: string;
            equation: OperatorContent;
            addedAt: Date;
        }[];
    };
}) | ({
    method: "POST";
    path: "/get-search-favorite-equations-count";
    body: {
        userId: string;
        partialFavoriteEquationName: string;
    };
    response: {
        code: 200;
        information: "favoriEquations.searchDetails";
        body: {
            total: number;
        };
    };
});

export { CodegenRoutes };
/* v8 ignore stop */
