// Generated by @duplojs/types-codegen
/* eslint-disable */
/* prettier-ignore */
/* istanbul ignore file */
/* v8 ignore start */
// noinspection JSUnusedGlobalSymbols
// @ts-nocheck
type BakedDocumentLanguage = "fr-FR" | "en-US";

export { BakedDocumentLanguage };

type ArticleType = "adaptiveClinicalTrial" | "address" | "autobiography" | "bibliography" | "biography" | "booksAndDocuments" | "caseReports" | "classicalArticle" | "clinicalConference" | "clinicalStudy" | "clinicalTrial" | "clinicalTrialProtocol" | "clinicalTrialPhaseI" | "clinicalTrialPhaseII" | "clinicalTrialPhaseIII" | "clinicalTrialPhaseIV" | "clinicalTrialVeterinary" | "collectedWork" | "comment" | "comparativeStudy" | "congress" | "consensusDevelopmentConference" | "consensusDevelopmentConferenceNIH" | "controlledClinicalTrial" | "correctedAndRepublishedArticle" | "dataset" | "dictionary" | "directory" | "duplicatePublication" | "editorial" | "electronicSupplementaryMaterials" | "englishAbstract" | "equivalenceTrial" | "evaluationStudy" | "expressionOfConcern" | "festschrift" | "governmentPublication" | "guideline" | "historicalArticle" | "interactiveTutorial" | "interview" | "introductoryJournalArticle" | "journalArticle" | "lecture" | "legalCase" | "legislation" | "letter" | "metaAnalysis" | "multicenterStudy" | "news" | "newspaperArticle" | "observationalStudy" | "observationalStudyVeterinary" | "overall" | "patientEducationHandout" | "periodicalIndex" | "personalNarrative" | "portrait" | "practiceGuideline" | "pragmaticClinicalTrial" | "preprint" | "publishedErratum" | "randomizedControlledTrial" | "randomizedControlledTrialVeterinary" | "researchSupportAmericanRecoveryAndReinvestmentAct" | "researchSupportNIHExtramural" | "researchSupportNIHIntramural" | "researchSupportNonUSGovt" | "researchSupportUSGovtNonPHS" | "researchSupportUSGovtPHS" | "researchSupportUSGovt" | "retractedPublication" | "retractionOfPublication" | "review" | "scopingReview" | "scientificIntegrityReview" | "systematicReview" | "technicalReport" | "twinStudy" | "validationStudy" | "videoAudioMedia" | "webcast";

export { ArticleType };

type FiltersValues = {
    articleType?: ArticleType[] | undefined;
    gender?: ("male" | "female")[] | undefined;
    species?: ("human" | "otherAnimal")[] | undefined;
    year?: {
        from: number;
        to: number;
    } | undefined;
};

export { FiltersValues };

type Facet = {
    type: "multiSelect";
    name: "articleType";
    values: {
        value: ArticleType;
        quantity: number;
    }[];
} | {
    type: "checkbox";
    name: "gender";
    values: {
        value: "male" | "female";
        quantity: number;
    }[];
} | {
    type: "checkbox";
    name: "species";
    values: {
        value: "human" | "otherAnimal";
        quantity: number;
    }[];
} | {
    type: "range";
    name: "year";
    values: {
        value: number;
        quantity: number;
    }[];
};

export { Facet };

type BakedDocumentSearchResult = {
    score: number;
    bakedDocumentId: string;
    title: string;
    articleTypes: ArticleType[];
    authors: string[];
    webPublishDate: string | null;
    journalPublishDate: string | null;
    summary: string | null;
    keywords: string[] | null;
};

export { BakedDocumentSearchResult };

type CodegenRoutes = ({
    method: "POST";
    path: "/authentication";
    body: string;
    response: {
        code: 401;
        information: "credential.invalid";
        body?: undefined;
    } | {
        code: 200;
        information: "user.logged";
        body: string;
    };
}) | ({
    method: "POST";
    path: "/create-answer";
    body: {
        postId: string;
        content: string;
    };
    response: {
        code: 403;
        information: "accessToken.invalid";
        body?: undefined;
    } | {
        code: 404;
        information: "user.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 201;
        information: "answer.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/answer-list";
    body: {
        postId: string;
        page: number;
    };
    response: {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "answerList.found";
        body: {
            id: string;
            postId: string;
            content: string;
            author: {
                id: string;
                username: string;
            };
        }[];
    };
}) | ({
    method: "POST";
    path: "/create-post";
    body: {
        topic: string;
        content: string;
        documentId: string;
    };
    response: {
        code: 403;
        information: "accessToken.invalid";
        body?: undefined;
    } | {
        code: 404;
        information: "user.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 201;
        information: "post.created";
        body: {
            id: string;
        };
    };
}) | ({
    method: "POST";
    path: "/post-list";
    body: {
        documentId: string;
        page: number;
    };
    response: {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postList.found";
        body: {
            id: string;
            topic: string;
            content: string | null;
            author: {
                id: string;
                username: string;
            };
            createdAt: string;
            answerCount: number;
        }[];
    };
}) | ({
    method: "POST";
    path: "/post-page";
    body: {
        postId: string;
        language: BakedDocumentLanguage;
    };
    response: {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postPage.found";
        body: {
            post: {
                id: string;
                topic: string;
                content: string | null;
                author: {
                    id: string;
                    username: string;
                };
                createdAt: string;
                answerCount: number;
            };
            document: {
                id: string;
                title: string;
                language: BakedDocumentLanguage;
            };
            quantityAnswerPerPage: number;
        };
    };
}) | ({
    method: "POST";
    path: "/post-list-page";
    body: {
        documentId: string;
    };
    response: {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postListPage.found";
        body: {
            document: {
                id: string;
                title: string;
                language: BakedDocumentLanguage;
            };
            totalPostCount: number;
            quantityPostPerPage: number;
        };
    };
}) | ({
    method: "POST";
    path: "/user";
    response: {
        code: 403;
        information: "accessToken.invalid";
        body?: undefined;
    } | {
        code: 404;
        information: "user.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "user.self";
        body: {
            id: string;
            username: string;
            email: string;
        };
    };
}) | ({
    method: "POST";
    path: "/search-details";
    body: {
        language: BakedDocumentLanguage;
        term: string;
        filtersValues?: FiltersValues | undefined;
    };
    response: {
        code: 200;
        information: "facets.results";
        body: {
            total: number;
            facets: Facet[];
            quantityPerPage: number;
        };
    };
}) | ({
    method: "POST";
    path: "/simple-search-results";
    body: {
        language: BakedDocumentLanguage;
        page: number;
        term: string;
        filtersValues?: FiltersValues | undefined;
    };
    response: {
        code: 200;
        information: "simpleSearch.results";
        body: BakedDocumentSearchResult[];
    };
});

export { CodegenRoutes };
/* v8 ignore stop */
