// Generated by @duplojs/types-codegen
/* eslint-disable */
/* prettier-ignore */
/* istanbul ignore file */
/* v8 ignore start */
// noinspection JSUnusedGlobalSymbols
// @ts-nocheck
type UserLanguage = "fr-FR" | "en-US";

export { UserLanguage };

type Answer = {
    id: string;
    postId: string;
    content: string;
    authorId: string;
    authorName: string;
    createdAt: string;
};

export { Answer };

type Post = {
    id: string;
    topic: string;
    content: string;
    authorId: string;
    authorName: string;
    createdAt: string;
    answerCount: number;
};

export { Post };

type BakedDocumentLanguage = "fr-FR" | "en-US";

export { BakedDocumentLanguage };

type User = {
    id: string;
    username: string;
    email: string;
    language: UserLanguage;
    lastUpdate: string;
    banned: boolean;
};

export { User };

type OperatorContent = OperatorAnd | OperatorOR | OperatorNot | ComparatorText | ComparatorYear | ComparatorStrictText | ComparatorAuthor | ComparatorYearInterval | ComparatorArticleType | ComparatorProvider;

export { OperatorContent };

type OperatorAnd = {
    type: "operator";
    name: "and";
    content: OperatorContent[];
};

export { OperatorAnd };

type OperatorOR = {
    type: "operator";
    name: "or";
    content: OperatorContent[];
};

export { OperatorOR };

type OperatorNot = {
    type: "operator";
    name: "not";
    content: OperatorContent | null;
};

export { OperatorNot };

type ComparatorText = {
    type: "comparator";
    name: "text";
    boost: "1" | "2" | "3";
    field: "allField" | "title" | "abstract" | "keywords";
    value: string;
};

export { ComparatorText };

type ComparatorYear = {
    type: "comparator";
    name: "year";
    boost: "1" | "2" | "3";
    field: "allDate" | "webDate" | "journalDate";
    value: number;
};

export { ComparatorYear };

type ComparatorStrictText = {
    type: "comparator";
    name: "strictText";
    boost: "1" | "2" | "3";
    field: "allField" | "title" | "abstract" | "keywords";
    value: string;
};

export { ComparatorStrictText };

type ComparatorAuthor = {
    type: "comparator";
    name: "author";
    boost: "1" | "2" | "3";
    value: string;
};

export { ComparatorAuthor };

type ComparatorYearInterval = {
    type: "comparator";
    name: "yearInterval";
    boost: "1" | "2" | "3";
    field: "allDate" | "webDate" | "journalDate";
    value: {
        from: number;
        to: number;
    };
};

export { ComparatorYearInterval };

type ComparatorArticleType = {
    type: "comparator";
    name: "articleType";
    boost: "1" | "2" | "3";
    value: ("metaAnalysis")[];
};

export { ComparatorArticleType };

type ComparatorProvider = {
    type: "comparator";
    name: "provider";
    boost: "1" | "2" | "3";
    value: ("pubmed")[];
};

export { ComparatorProvider };

type FiltersValues = {
    articleType?: ArticleType[] | undefined;
    gender?: GenderFacetValue[] | undefined;
    species?: SpeciesFacetValue[] | undefined;
    year?: {
        from: number;
        to: number;
    } | undefined;
};

export { FiltersValues };

type ArticleType = "adaptiveClinicalTrial" | "address" | "autobiography" | "bibliography" | "biography" | "booksAndDocuments" | "caseReports" | "classicalArticle" | "clinicalConference" | "clinicalStudy" | "clinicalTrial" | "clinicalTrialProtocol" | "clinicalTrialPhaseI" | "clinicalTrialPhaseII" | "clinicalTrialPhaseIII" | "clinicalTrialPhaseIV" | "clinicalTrialVeterinary" | "collectedWork" | "comment" | "comparativeStudy" | "congress" | "consensusDevelopmentConference" | "consensusDevelopmentConferenceNIH" | "controlledClinicalTrial" | "correctedAndRepublishedArticle" | "dataset" | "dictionary" | "directory" | "duplicatePublication" | "editorial" | "electronicSupplementaryMaterials" | "englishAbstract" | "equivalenceTrial" | "evaluationStudy" | "expressionOfConcern" | "festschrift" | "governmentPublication" | "guideline" | "historicalArticle" | "interactiveTutorial" | "interview" | "introductoryJournalArticle" | "journalArticle" | "lecture" | "legalCase" | "legislation" | "letter" | "metaAnalysis" | "multicenterStudy" | "news" | "newspaperArticle" | "observationalStudy" | "observationalStudyVeterinary" | "overall" | "patientEducationHandout" | "periodicalIndex" | "personalNarrative" | "portrait" | "practiceGuideline" | "pragmaticClinicalTrial" | "preprint" | "publishedErratum" | "randomizedControlledTrial" | "randomizedControlledTrialVeterinary" | "researchSupportAmericanRecoveryAndReinvestmentAct" | "researchSupportNIHExtramural" | "researchSupportNIHIntramural" | "researchSupportNonUSGovt" | "researchSupportUSGovtNonPHS" | "researchSupportUSGovtPHS" | "researchSupportUSGovt" | "retractedPublication" | "retractionOfPublication" | "review" | "scopingReview" | "scientificIntegrityReview" | "systematicReview" | "technicalReport" | "twinStudy" | "validationStudy" | "videoAudioMedia" | "webcast";

export { ArticleType };

type GenderFacetValue = "male" | "female";

export { GenderFacetValue };

type SpeciesFacetValue = "human" | "otherAnimal";

export { SpeciesFacetValue };

type Facet = {
    type: "multiSelect";
    name: "articleType";
    values: {
        value: ArticleType;
        quantity: number;
    }[];
} | {
    type: "checkbox";
    name: "gender";
    values: {
        value: GenderFacetValue;
        quantity: number;
    }[];
} | {
    type: "checkbox";
    name: "species";
    values: {
        value: SpeciesFacetValue;
        quantity: number;
    }[];
} | {
    type: "range";
    name: "year";
    values: {
        value: number;
        quantity: number;
    }[];
};

export { Facet };

type BakedDocumentSearchResult = {
    score: number;
    bakedDocumentId: string;
    title: string;
    articleTypes: ArticleType[];
    authors: string[];
    webPublishDate: string | null;
    journalPublishDate: string | null;
    summary: string | null;
    keywords: string[] | null;
};

export { BakedDocumentSearchResult };

type BakedDocument = {
    id: string;
    nodeSameRawDocumentId: string;
    articleTypes: ArticleType[];
    title: string;
    language: BakedDocumentLanguage;
    abstract: string | null;
    authors: {
        name: string;
        affiliations: string[] | null;
    }[];
    abstractDetails: {
        name: string;
        label: string;
        content: string;
    }[] | null;
    resources: {
        resourceProvider: "DOIFoundation" | "pubmed";
        url: string;
    }[];
    keywords: {
        value: string;
    }[];
    webPublishDate: FlexibleDate | null;
    journalPublishDate: FlexibleDate | null;
};

export { BakedDocument };

type FlexibleDate = {
    day: null;
    month: null;
    year: number;
} | {
    day: null;
    month: number;
    year: number;
} | {
    day: number;
    month: number;
    year: number;
};

export { FlexibleDate };

type Notification = RegisterNotification | ReplyToPostNotification | {
    id: string;
    processed: boolean;
    createdAt: string;
    deleteAt: string;
    type: "userPostBanNotificationType";
    postId: string;
    reason: string;
    warningId: string;
} | {
    id: string;
    processed: boolean;
    createdAt: string;
    deleteAt: string;
    type: "userPostWarningNotificationType";
    postId: string;
    reason: string;
    warningId: string;
};

export { Notification };

type RegisterNotification = {
    id: string;
    processed: boolean;
    createdAt: string;
    deleteAt: string;
    type: "registerNotificationType";
};

export { RegisterNotification };

type ReplyToPostNotification = {
    id: string;
    processed: boolean;
    createdAt: string;
    deleteAt: string;
    type: "replyToPostNotificationType";
    postId: string;
    usernameOfReplyPost: string;
    summaryOfReplyPost: string;
};

export { ReplyToPostNotification };

type DocumentFolder = {
    id: string;
    userId: string;
    name: string;
    numberOfDocument: number;
    createdAt: string;
};

export { DocumentFolder };

type CodegenRoutes = ({
    method: "POST";
    path: "/login";
    body: {
        firebaseToken: string;
    };
    response: {
        code: 401;
        information: "credential.invalid";
        body?: undefined;
    } | {
        code: 404;
        information: "user.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "user.logged";
        body: {
            accessToken: string;
        };
    };
}) | ({
    method: "POST";
    path: "/register";
    body: {
        firebaseToken: string;
        username: string;
        language: UserLanguage;
    };
    response: {
        code: 401;
        information: "credential.invalid";
        body?: undefined;
    } | {
        code: 409;
        information: "user.alreadyExist";
        body?: undefined;
    } | {
        code: 200;
        information: "user.registered";
        body: {
            accessToken: string;
        };
    };
}) | ({
    method: "POST";
    path: "/create-answer";
    body: {
        postId: string;
        content: string;
    };
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 201;
        information: "answer.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/answer-list";
    body: {
        postId: string;
        page: number;
    };
    response: {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "answerList.found";
        body: Answer[];
    };
}) | ({
    method: "POST";
    path: "/post-list";
    body: {
        documentId: string;
        page: number;
    };
    response: {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postList.found";
        body: Post[];
    };
}) | ({
    method: "POST";
    path: "/post-list-page";
    body: {
        documentId: string;
    };
    response: {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postListPage.found";
        body: {
            document: {
                id: string;
                title: string;
                language: BakedDocumentLanguage;
            };
            totalPostCount: number;
            quantityPostPerPage: number;
        };
    };
}) | ({
    method: "POST";
    path: "/post-page";
    body: {
        postId: string;
        language: BakedDocumentLanguage;
    };
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postPage.found";
        body: {
            post: Post;
            document: {
                id: string;
                title: string;
                language: BakedDocumentLanguage;
            };
            quantityAnswerPerPage: number;
            notificationOfPostIsActivate: boolean;
        };
    };
}) | ({
    method: "POST";
    path: "/create-post";
    body: {
        topic: string;
        content: string;
        documentId: string;
    };
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 201;
        information: "post.created";
        body: {
            id: string;
        };
    };
}) | ({
    method: "POST";
    path: "/self-user";
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 200;
        information: "user.self";
        body: User;
    };
}) | ({
    method: "POST";
    path: "/update-self-user";
    body?: {
        username?: string | undefined;
        language?: UserLanguage | undefined;
    } | undefined;
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 403;
        information: "user.shortUpdatedDelay";
        body?: undefined;
    } | {
        code: 404;
        information: "user.notfound";
        body?: undefined;
    } | {
        code: 204;
        information: "user.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/search-details";
    body: {
        language: BakedDocumentLanguage;
        term: string | OperatorContent;
        filtersValues?: FiltersValues | undefined;
    };
    response: {
        code: 200;
        information: "search.details";
        body: {
            total: number;
            facets: Facet[];
            quantityPerPage: number;
        };
    };
}) | ({
    method: "POST";
    path: "/search-results";
    body: {
        language: BakedDocumentLanguage;
        page: number;
        term: string | OperatorContent;
        filtersValues?: FiltersValues | undefined;
    };
    response: {
        code: 200;
        information: "simpleSearch.results";
        body: BakedDocumentSearchResult[];
    };
}) | ({
    method: "POST";
    path: "/document-page";
    body: {
        bakedDocumentId: string;
    };
    response: {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "documentPage.found";
        body: {
            document: BakedDocument;
            posts: Post[];
        };
    };
}) | ({
    method: "POST";
    path: "/notification-list";
    body: {
        page: number;
    };
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 200;
        information: "notificationList.found";
        body: Notification[];
    };
}) | ({
    method: "POST";
    path: "/toggle-post-notification";
    body: {
        postId: string;
        enable: boolean;
    };
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "togglePostNotification.enabled";
        body?: undefined;
    } | {
        code: 200;
        information: "togglePostNotification.disabled";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/notification-list-page";
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 200;
        information: "notificationListPage.found";
        body: {
            totalNoticationCount: number;
            quantityNotificationPerPage: number;
        };
    };
}) | ({
    method: "POST";
    path: "/upsert-baked-document-translation-reporting";
    body: {
        bakedDocumentId: string;
        reportingDetails: string;
    };
    response: {
        code: 401;
        information: "user.banned";
        body?: undefined;
    } | {
        code: 403;
        information: "authentication.required";
        body?: undefined;
    } | {
        code: 404;
        information: "document.notfound";
        body?: undefined;
    } | {
        code: 204;
        information: "bakedDocumentTranslationReporting.upsert";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/create-document-folder";
    body: {
        documentFolderName: string;
    };
    response: {
        code: 403;
        information: "accessToken.invalid";
        body?: undefined;
    } | {
        code: 409;
        information: "documentFolder.alreadyExists";
        body?: undefined;
    } | {
        code: 403;
        information: "documentFolder.maxQuantity";
        body?: undefined;
    } | {
        code: 201;
        information: "documentFolder.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/find-many-document-folders";
    body: {
        partialDocumentFolderName: string;
        page: number;
    };
    response: {
        code: 403;
        information: "accessToken.invalid";
        body?: undefined;
    } | {
        code: 200;
        information: "documentFolders.found";
        body: {
            list: DocumentFolder[];
            total: number;
        };
    };
}) | ({
    method: "POST";
    path: "/document-folder-page";
    response: {
        code: 403;
        information: "accessToken.invalid";
        body?: undefined;
    } | {
        code: 200;
        information: "documentFolderPage.found";
        body: {
            total: number;
            quantityPerPage: number;
        };
    };
});

export { CodegenRoutes };
/* v8 ignore stop */
