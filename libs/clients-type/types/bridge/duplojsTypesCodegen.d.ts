// Generated by @duplojs/types-codegen
/* eslint-disable */
/* prettier-ignore */
/* istanbul ignore file */
/* v8 ignore start */
// noinspection JSUnusedGlobalSymbols
// @ts-nocheck
type ReportingBakedDocumentTranslationListPage = {
    countTotal: number;
    quantityPerPage: number;
};

export { ReportingBakedDocumentTranslationListPage };

type ReportingBakedDocumentTranslationAggregateListRow = {
    bakedDocumentTitle: string;
    bakedDocumentId: string;
    reportingQuantity: number;
};

export { ReportingBakedDocumentTranslationAggregateListRow };

type ReportingBakedDocumentTranslationPage = {
    bakedDocument: {
        id: string;
        cookingMode: CookingMode;
        nodeSameRawDocumentId: string;
        language: BakedDocumentLanguage;
        title: string;
        abstract: string | null;
        abstractDetails: {
            name: string;
            label: string;
            content: string;
        }[] | null;
        keywords: string[];
    };
    reporting: {
        countTotal: number;
        quantityPerPage: number;
    };
};

export { ReportingBakedDocumentTranslationPage };

type CookingMode = "default" | "libretranslate" | "googleScrape";

export { CookingMode };

type BakedDocumentLanguage = "fr-FR" | "en-US";

export { BakedDocumentLanguage };

type ReportingBakedDocumentTranslationListRow = {
    id: string;
    userId: string;
    bakedDocumentId: string;
    details: string;
};

export { ReportingBakedDocumentTranslationListRow };

type BakedDocumentNewTranslation = {
    cookingMode: CookingMode;
    title: string;
    abstract: string | null;
    abstractDetails: {
        name: string;
        label: string;
        content: string;
    }[] | null;
    keywords: string[];
};

export { BakedDocumentNewTranslation };

type PostModerationPage = {
    post: {
        id: string;
        nodeSameRawDocumentId: string;
        topic: string;
        content: string;
        authorId: string;
        authorName: string;
        answerCount: number;
        createdAt: string;
    };
    unprocessedTotalCount: number;
};

export { PostModerationPage };

type AnswerModerationPage = {
    answer: {
        id: string;
        postId: string;
        content: string;
        authorId: string;
        authorName: string;
        status: "compliant" | "unprocessed" | "notCompliant";
        createdAt: string;
    };
    unprocessedTotalCount: number;
};

export { AnswerModerationPage };

type CodegenRoutes = ({
    method: "POST";
    path: "/reporting-baked-document-translation-aggregate-list-page";
    response: {
        code: 200;
        information: "reportingBakedDocumentTranslationAggregateListPage.found";
        body: ReportingBakedDocumentTranslationListPage;
    };
}) | ({
    method: "POST";
    path: "/reporting-baked-document-translation-aggregate-list";
    body: {
        page: number;
    };
    response: {
        code: 200;
        information: "reportingBakeDocumentTranslationAggregateList.found";
        body: ReportingBakedDocumentTranslationAggregateListRow[];
    };
}) | ({
    method: "POST";
    path: "/reporting-baked-document-translation-page";
    body: {
        bakedDocumentId: string;
    };
    response: {
        code: 404;
        information: "bakedDocument.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "reportingBakedDocumentTranslationPage.found";
        body: ReportingBakedDocumentTranslationPage;
    };
}) | ({
    method: "POST";
    path: "/reporting-baked-document-translation-list";
    body: {
        bakedDocumentId: string;
        page: number;
    };
    response: {
        code: 200;
        information: "reportingDakedDocumentTranslationList.found";
        body: ReportingBakedDocumentTranslationListRow[];
    };
}) | ({
    method: "POST";
    path: "/get-new-baked-document-translation";
    body: {
        nodeSameRawDocumentId: string;
        bakedDocumentLanguage: BakedDocumentLanguage;
        cookingMode: CookingMode;
    };
    response: {
        code: 404;
        information: "nodeSameRawDocument.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "bakedDocument.getNewTranslation";
        body: BakedDocumentNewTranslation;
    };
}) | ({
    method: "POST";
    path: "/make-new-baked-document-translation";
    body: {
        bakedDocumentId: string;
        nodeSameRawDocumentId: string;
        bakedDocumentLanguage: BakedDocumentLanguage;
        cookingMode: CookingMode;
    };
    response: {
        code: 404;
        information: "nodeSameRawDocument.notfound";
        body?: undefined;
    } | {
        code: 204;
        information: "bakedDocument.makeNewTranslation";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/post-moderation-page";
    response: {
        code: 404;
        information: "postModerationPage.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "postModerationPage.found";
        body: PostModerationPage;
    };
}) | ({
    method: "POST";
    path: "/posts/{postId}/is-compliant";
    params: {
        postId: string;
    };
    response: {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 403;
        information: "post.wrongStatus";
        body?: undefined;
    } | {
        code: 200;
        information: "post.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/posts/{postId}/is-not-compliant-and-create-warning";
    body: {
        makeUserBan: boolean;
        reason: string;
    };
    params: {
        postId: string;
    };
    response: {
        code: 403;
        information: "post.wrongStatus";
        body?: undefined;
    } | {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "post.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/answer-moderation-page";
    response: {
        code: 404;
        information: "answerModerationPage.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "answerModerationPage.found";
        body: AnswerModerationPage;
    };
}) | ({
    method: "POST";
    path: "/answers/{answerId}/is-compliant";
    params: {
        answerId: string;
    };
    response: {
        code: 404;
        information: "answer.notfound";
        body?: undefined;
    } | {
        code: 403;
        information: "answer.wrongStatus";
        body?: undefined;
    } | {
        code: 200;
        information: "answer.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/answers/{answerId}/is-not-compliant-and-create-warning";
    body: {
        makeUserBan: boolean;
        reason: string;
    };
    params: {
        answerId: string;
    };
    response: {
        code: 403;
        information: "answer.wrongStatus";
        body?: undefined;
    } | {
        code: 404;
        information: "post.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "answer.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "answer.updated";
        body?: undefined;
    };
});

export { CodegenRoutes };
/* v8 ignore stop */
