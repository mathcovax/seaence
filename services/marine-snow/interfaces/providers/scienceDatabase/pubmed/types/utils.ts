import { type ArticleType } from "@business/domains/common/articleType";
import { type ExpectType } from "@duplojs/utils";
import { createEnum } from "@vendors/clean";
import { type UniqueFieldName, type AbstractSectionName } from "@vendors/clients-type/abys/duplojsTypesCodegen";

export const articleTypeToFilterArticleType = {
	adaptiveClinicalTrial: "adaptiveclinicaltrial",
	address: "address",
	autobiography: "autobiography",
	bibliography: "bibliography",
	biography: "biography",
	booksAndDocuments: "booksdocs",
	caseReports: "casereports",
	classicalArticle: "classicalarticle",
	clinicalConference: "clinicalconference",
	clinicalStudy: "clinicalstudy",
	clinicalTrial: "clinicaltrial",
	clinicalTrialProtocol: "clinicaltrialprotocol",
	clinicalTrialPhaseI: "clinicaltrialphasei",
	clinicalTrialPhaseII: "clinicaltrialphaseii",
	clinicalTrialPhaseIII: "clinicaltrialphaseiii",
	clinicalTrialPhaseIV: "clinicaltrialphaseiv",
	clinicalTrialVeterinary: "veterinaryclinicaltrial",
	collectedWork: "collectedwork",
	comment: "comment",
	comparativeStudy: "comparativestudy",
	congress: "congress",
	consensusDevelopmentConference: "consensusdevelopmentconference",
	consensusDevelopmentConferenceNIH: "consensusdevelopmentconferencenih",
	controlledClinicalTrial: "controlledclinicaltrial",
	correctedAndRepublishedArticle: "correctedandrepublishedarticle",
	dataset: "dataset",
	dictionary: "dictionary",
	directory: "directory",
	duplicatePublication: "duplicatepublication",
	editorial: "editorial",
	electronicSupplementaryMaterials: "electronicsupplementarymaterials",
	englishAbstract: "englishabstract",
	equivalenceTrial: "equivalencetrial",
	evaluationStudy: "evaluationstudy",
	expressionOfConcern: "expressionofconcern",
	festschrift: "festschrift",
	governmentPublication: "governmentpublication",
	guideline: "guideline",
	historicalArticle: "historicalarticle",
	interactiveTutorial: "interactivetutorial",
	interview: "interview",
	introductoryJournalArticle: "introductoryjournalarticle",
	journalArticle: "journalarticle",
	lecture: "lecture",
	legalCase: "legalcase",
	legislation: "legislation",
	letter: "letter",
	metaAnalysis: "meta-analysis",
	multicenterStudy: "multicenterstudy",
	news: "news",
	newspaperArticle: "newspaperarticle",
	observationalStudy: "observationalstudy",
	observationalStudyVeterinary: "veterinaryobservationalstudy",
	overall: "overall",
	patientEducationHandout: "patienteducationhandout",
	periodicalIndex: "periodicalindex",
	personalNarrative: "personalnarrative",
	portrait: "portrait",
	practiceGuideline: "practiceguideline",
	pragmaticClinicalTrial: "pragmaticclinicaltrial",
	preprint: "preprint",
	publishedErratum: "publishederratum",
	randomizedControlledTrial: "randomizedcontrolledtrial",
	randomizedControlledTrialVeterinary: "randomizedcontrolledtrialveterinary",
	researchSupportAmericanRecoveryAndReinvestmentAct: "researchsupportamericanrecoveryandreinvestmentact",
	researchSupportNIHExtramural: "researchsupportnihextramural",
	researchSupportNIHIntramural: "researchsupportnihintramural",
	researchSupportNonUSGovt: "researchsupportnonusgovt",
	researchSupportUSGovt: "researchsupportusgovtnonphs",
	researchSupportUSGovtNonPHS: "researchsupportusgovtphs",
	researchSupportUSGovtPHS: "researchsupportusgovernment",
	retractedPublication: "retractedpublication",
	retractionOfPublication: "retractionofpublication",
	review: "review",
	scopingReview: "scopingreview",
	scientificIntegrityReview: "scientificintegrityreview",
	systematicReview: "systematicreview",
	technicalReport: "technicalreport",
	twinStudy: "twinstudy",
	validationStudy: "validationstudy",
	videoAudioMedia: "videoaudiomedia",
	webcast: "webcast",
} as const satisfies Record<ArticleType["value"], string>;

export type PubmedFilterArticleType =
	typeof articleTypeToFilterArticleType[keyof typeof articleTypeToFilterArticleType];

export const articleTypeBackedToUI: Record<ArticleType["value"], string | string[] | undefined> = {
	adaptiveClinicalTrial: "D000076362",
	address: "D019484",
	autobiography: "D020493",
	bibliography: "D016417",
	biography: "D019215",
	booksAndDocuments: "D016454",
	caseReports: "D002363",
	classicalArticle: "D016419",
	clinicalConference: "D016429",
	clinicalStudy: undefined,
	clinicalTrial: "D016430",
	clinicalTrialProtocol: "D000078325",
	clinicalTrialPhaseI: "D017426",
	clinicalTrialPhaseII: "D017427",
	clinicalTrialPhaseIII: "D017428",
	clinicalTrialPhaseIV: "D017429",
	clinicalTrialVeterinary: "D000077522",
	collectedWork: undefined,
	comment: "D016420",
	comparativeStudy: "D003160",
	congress: "D016423",
	consensusDevelopmentConference: "D016446",
	consensusDevelopmentConferenceNIH: "D016447",
	controlledClinicalTrial: "D016449",
	correctedAndRepublishedArticle: "D016439",
	dataset: "D064886",
	dictionary: "D016437",
	directory: "D016435",
	duplicatePublication: "D016438",
	editorial: "D016421",
	electronicSupplementaryMaterials: undefined,
	englishAbstract: "D004740",
	equivalenceTrial: "D000073843",
	evaluationStudy: "D023362",
	expressionOfConcern: "D000075742",
	festschrift: "D016221",
	governmentPublication: "D022903",
	guideline: undefined,
	historicalArticle: "D016456",
	interactiveTutorial: "D054710",
	interview: "D017203",
	introductoryJournalArticle: "D054711",
	journalArticle: "D016428",
	lecture: "D019531",
	legalCase: "D016418",
	legislation: "D020485",
	letter: "D016422",
	metaAnalysis: [
		"D017418",
		"D000099094",
	],
	multicenterStudy: "D016448",
	news: "D016433",
	newspaperArticle: "D018431",
	observationalStudy: "D064888",
	observationalStudyVeterinary: "D000078323",
	overall: "D016424",
	patientEducationHandout: "D029282",
	periodicalIndex: "D016453",
	personalNarrative: "D062210",
	portrait: "D019477",
	practiceGuideline: "D017065",
	pragmaticClinicalTrial: "D065007",
	preprint: "D000076942",
	publishedErratum: "D016425",
	randomizedControlledTrial: "D016449",
	randomizedControlledTrialVeterinary: "D000081262",
	researchSupportAmericanRecoveryAndReinvestmentAct: "D057666",
	researchSupportNIHExtramural: "D052061",
	researchSupportNIHIntramural: "D052060",
	researchSupportNonUSGovt: "D013485",
	researchSupportUSGovt: "D013485",
	researchSupportUSGovtNonPHS: "D013487",
	researchSupportUSGovtPHS: "D013486",
	retractedPublication: "D016441",
	retractionOfPublication: "D016440",
	review: "D016454",
	scopingReview: "D000098583",
	scientificIntegrityReview: "D016426",
	systematicReview: "D000078182",
	technicalReport: "D016427",
	twinStudy: "D018486",
	validationStudy: "D023361",
	videoAudioMedia: "D059040",
	webcast: "D057405",
};

export const reverseArticleTypeBackedToUI: Record<string, ArticleType["value"] | undefined> = Object.fromEntries(
	Object
		.entries(articleTypeBackedToUI)
		.filter(([_key, value]) => !!value)
		.flatMap(
			([key, value]) => value instanceof Array
				? value.map((subValue) => ({
					value: subValue,
					key,
				}))
				: {
					value,
					key,
				},
		)
		.map(({ value, key }) => [value, key]),
);

export const acronymMounthToNumber: Record<string, undefined | number> = {
	Jan: 1,
	Feb: 2,
	Mar: 3,
	Apr: 4,
	May: 5,
	Jun: 6,
	Jul: 7,
	Aug: 8,
	Sep: 9,
	Oct: 10,
	Nov: 11,
	Dec: 12,
};

export const abstractSectionNameEnum = createEnum([
	"introduction",
	"background",
	"objective",
	"method",
	"result",
	"conclusion",
	"reference",
	"acknowledgment",
	"objective",
	"option",
	"outcome",
	"evidence",
	"value",
	"benefit",
	"recommendation",
	"validation",
	"sponsor",
	"purpose",
	"patient",
	"setting",
	"studyObjective",
	"measurementAndMainResult",

	"introductions",
	"backgrounds",
	"objectives",
	"methods",
	"results",
	"conclusions",
	"references",
	"acknowledgments",
	"objectives",
	"options",
	"outcomes",
	"evidences",
	"values",
	"benefits",
	"recommendations",
	"validations",
	"sponsors",
	"purposes",
	"patients",
	"settings",
	"studyObjectives",
	"measurementsAndMainResults",
]);

type _AbstractSectionNameExpect = ExpectType<
	ReturnType<typeof abstractSectionNameEnum["toTuple"]>[number],
	AbstractSectionName,
	"strict"
>;

export const uniqueFieldNameMapper = {
	doi: "digitalObjectIdentifier",
} as const;

type _UniqueFieldNameExpect = ExpectType<
	typeof uniqueFieldNameMapper[keyof typeof uniqueFieldNameMapper],
	Exclude<UniqueFieldName, "specific">,
	"strict"
>;
