{
	"vue-template": {
		"prefix": "vuet",
		"scope": "vue",
		"body": [
			"<script setup lang=\"ts\">",
			"interface Props {",
			"",
			"}",
			"",
			"defineProps<Props>();",
			"$1",
			"</script>",
			"",
			"<template>",
			"   <div></div>",
			"</template>"
		],
		"description": "vue template"
	},
	"duplo-route": {
		"prefix": "route",
		"scope": "typescript",
		"body": [
			"useBuilder()",
			"\t.createRoute($1, $2)",
			"\t.handler((pickup) => {",
			"\t\t$3",
			"\t});"
		]
	},
	"clean-usecase": {
		"prefix": "cuc",
		"scope": "typescript",
		"body": [
			"import { UsecaseHandler } from \"@vendors/clean\";",
			"",
			"interface Input {",
			"",
			"}",
			"",
			"export class $1Usecase extends UsecaseHandler.create({",
			"",
			"}) {",
			"\tpublic execute({}: Input) {",
			"",
			"\t}",
			"}",
			"",
		]
	},
	"clean-entity": {
		"prefix": "ce",
		"scope": "typescript",
		"body": [
			"import { EntityHandler, type GetValueObject, type GetEntityProperties, zod } from \"@vendors/clean\"",
			"",
			"export const $1IdObjecter = zod",
			"\t.string()",
			"\t.createValueObjecter(\"$1Id\");",
			"",
			"export type $2Id = GetValueObject<typeof $1IdObjecter>;",
			"",
			"export class $2Entity extends EntityHandler.create({",
			"\tid: $1IdObjecter,",
			"}) {",
			"\tpublic static create(params: GetEntityProperties<typeof $2Entity>) {",
			"\t\treturn new $2Entity(params);",
			"\t}",
			"}",
		]
	},
	"clean-repository": {
		"prefix": "cr",
		"scope": "typescript",
		"body": [
			"import { createRepositoryHandler, type RepositoryBase } from \"@vendors/clean\";",
			"",
			"export interface $1Repository extends RepositoryBase<$3> {",
			"",
			"}",
			"",
			"export const $2Repository = createRepositoryHandler<",
			"\t$1Repository",
			">();",
		]
	},
	"clean-objecter": {
		"prefix": "co",
		"scope": "typescript",
		"body": [
			"export const $1Objecter = zod",
			".$2",
			".createValueObjecter(\"$1\");",
			"",
			"export type $1 = GetValueObject<typeof $1Objecter>;",
		]
	},
}